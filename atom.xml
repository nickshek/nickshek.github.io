<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Nick Shek&#039;s Blog]]></title>
    <link href="/atom.xml" rel="self"/>
    <link href="/"/>
    <updated>2017-01-26T03:37:01+08:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[用ansible去傳送電子郵件]]></title>
            <link href="/b/用ansible去傳送電子郵件"/>
            <updated>2017-01-26T00:00:00+08:00</updated>
            <id>/b/用ansible去傳送電子郵件</id>
            <content type="html"><![CDATA[<p>
Ansible在前幾年是一個非常熱門的開源項目，以我理解ansible其中一個功能是可用來部署應用程式，但是我個人覺得部署應用程式暫時有 capistrano或deployer-php也非常足夠，同時部署應用程式於多個伺服器也勝任有餘，總比手動部署來得有效率。</p>

<p>因此比起用Ansible來去試一試寫一個部署scripts，我想使用Ansible試一試一個簡單的例子去在各server 執行一些command (e.g df -h)，再把結果以電子郵件傳送，這樣也可以感受一下Ansible的威力，雖然個人比起編寫yaml (yaml 內或text template 可以使用 jinja2 template language，一個類似Django template engine的template engine)，個人更喜愛寫Ruby 或 PHP scripts 。</p>

<p>首先在/etc/ansible/ansible.cfg 設定 host_key_checking = False，這樣會令測試ansible時簡單一點，ansible.cfg 的範例如下所示:</p>

<pre><code>[defaults]
host_key_checking = False
log_path=/path/to/log
</code></pre>

<p>之後建立一個ansible playbook e.g site.yml</p>

<pre><code class="yaml">- hosts: all:!local
  tasks:
  - name: ping all hosts
    ping:
    register: ping_result
    ignore_errors: yes

  - name: check disk space for all hosts
    command: df -h
    register: disk_result
    ignore_errors: yes

  - name: check high cpu usage process
    shell: ps -eo pcpu,user,args | sort -r -k1 | head -n5
    register: cpu_result
    ignore_errors: yes

  - name: run ifconfig
    shell: ifconfig
    register: ifconfig_result
    ignore_errors: yes

  - name: template email
    local_action: template src=./files/email_template.j2 dest='./tmp/{{ hostvars[inventory_hostname]["inventory_hostname"] }}.txt'

- hosts: local
  tasks:
  - name: create result email
    template: src=./files/email_summary_template.j2 dest=./tmp/email.txt
    delegate_to: localhost

  - name: send email result
    local_action: mail host='{{ email_host }}' port='{{ email_port }}' to='{{ email_to }}' username='{{ email_username }}' password='{{ email_password }}' subject='Report' body='{{ lookup("file", "./tmp/email.txt") }}' from='{{ email_from }}' charset='UTF-8' subtype='html'

</code></pre>

<p>以上的yaml script的流程好簡單，純粹用ping + shell module在不同的server 去執行不同的指令，之後用register 去把執行結果紀錄至指定的variable。因為萬一執行時出現錯誤，我們還是希望ansible playbook可繼續執行，因此設定ignore_errors = true即可。</p>

<p>下一步便是把各servers的執行結果變為一個template，因為這個執行結果在local machine的下一個tasks是需要的，所以使用了local_action</p>

<p>以下便用 email_template.j2 的原始碼:</p>

<pre><code>{% if ping_result is defined %}
&lt;h2&gt;Ping Command Result&lt;/h2&gt;
-----------------------------------&lt;br/&gt;
{{ ping_result | to_nice_yaml | replace("\n","&lt;br/&gt;") }}
&lt;br/&gt;
{% endif %}

{% if disk_result is defined %}
&lt;h2&gt;Disk Command Result&lt;/h2&gt;
-----------------------------------&lt;br/&gt;
{{ disk_result | to_nice_yaml | replace("\n","&lt;br/&gt;") }}
&lt;br/&gt;
{% endif %}

{% if cpu_result is defined %}
&lt;h2&gt;Command result for ps -eo pcpu,user,args | sort -r -k1 | head -n5&lt;/h2&gt;
-----------------------------------&lt;br/&gt;
{{ cpu_result | to_nice_yaml | replace("\n","&lt;br/&gt;") }}
{% endif %}
&lt;br/&gt;
</code></pre>

<p>執行結果是一個python 的 dict，為了確保所有的內容都被列印出來，純粹用to_nice_yaml 列印出來即可。
一下步便是把每一個inventory的執行結果整理至一個email template，然後寄出。email_summary_template.j2的內容如下所示:</p>

<pre><code>{% for host in groups['all'] %}
{% if host != 'localhost' %}
&lt;h1&gt;Result for
{{ hostvars[host]['inventory_hostname'] }}
&lt;/h1&gt;
&lt;b&gt;==================================================================&lt;/b&gt;&lt;br/&gt;
{{lookup("file", "./tmp/" + hostvars[host]["inventory_hostname"] + ".txt")}}
{% endif %}
{% endfor %}
</code></pre>

<p>請注意，send email result的這個tasks全部都使用了variable，避免直接寫死任何容易更改設定在 playboook內，這一個動作明顯不符合Ansible本身的哲學，variable可以放在group_vars/all :</p>

<pre><code>---
email_host: &lt;email_host&gt;
email_port: &lt;email_port&gt;
email_to: &lt;email_to&gt;
email_username: &lt;email_username&gt;
email_password: &lt;email_password&gt;
email_from: &lt;email_from&gt;

</code></pre>

<p>ansible的建議資料夾結構請參考 <a href="http://docs.ansible.com/ansible/playbooks_best_practices.html#directory-layout">http://docs.ansible.com/ansible/playbooks_best_practices.html#directory-layout</a></p>

<p>最後我們還是編寫hosts 檔案，以下是hosts的檔案範例，建議先設定ssh key來做認證，小心保管好private key + public key，避免把密碼寫在hosts file</p>

<pre><code>[local]
localhost ansible_connection=local

[servers]
&lt;example1.com&gt; ansible_user=&lt;example_user1&gt; ansible_port=&lt;example_port1&gt; ansible_ssh_private_key_file=.ssh/id_rsa
&lt;example1.com&gt; ansible_user=&lt;example_user2&gt; ansible_port=&lt;example_port2&gt; ansible_ssh_private_key_file=.ssh/id_rsa
</code></pre>

<p>設定方法可參考 (https://blog.longwin.com.tw/2005/12/ssh_keygen_no_passwd/)[https://blog.longwin.com.tw/2005/12/ssh_keygen_no_passwd/]</p>

<p>執行ansible playbook的方法相當簡單，如下所示:</p>

<pre><code class="bash">ansible-playbook -i hosts site.yml
</code></pre>

<p>這樣我們便完成了一個好簡單的ansible playbook，這個playbook也有相當多的改進的地方，例如我們都把tasks 都放在site.yml，現在還好，沒有太多tasks。但沒有按roles去把不同的tasks放入去長遠都會有維護上的問題，site.yml愈簡單愈容易維護，另外一個可以改進的地方是lookup時的錯誤處理。</p>

<p>想知道這個project的檔案結構，可參考 (https://github.com/nickshek/ansible_mail_example)[https://github.com/nickshek/ansible_mail_example]
</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[移除及暫停所有Docker container 指令]]></title>
            <link href="/b/移除及暫停所有Docker container 指令"/>
            <updated>2017-01-12T00:00:00+08:00</updated>
            <id>/b/移除及暫停所有Docker container 指令</id>
            <content type="html"><![CDATA[<p>怕自己忘記了，放上這個blog。這個指令在開發Docker Image 時還是經常使用的。</p>

<pre><code class="bash">docker stop $(docker ps -a -q)
docker rm $(docker ps -a -q)
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[思考在linux一次性重新命名多個file的問題]]></title>
            <link href="/b/ 思考在linux一次性重新命名多個file的問題"/>
            <updated>2016-10-01T00:00:00+08:00</updated>
            <id>/b/ 思考在linux一次性重新命名多個file的問題</id>
            <content type="html"><![CDATA[<p>作為一個偏好使用Linux平台的Developer， 或會經常遇到一次性命名多個File的問題。
如果File數目不算多的話，還可以透過mv command 一一執行。
但是如果遇上成千隻呢?那肯定要想一個較有效率的方法!
逐一人手命名檔案不合理呢!</p>

<p>說實話，如果我自已遇到這個問題不懂思考如何解決，我自已都過不了自己那一關!</p>

<p>現在假設我們要把檔案名稱含有"a_"的名字改為"abc_"</p>

<pre><code class="bash">shek@shek-pc:~/folder$ ls -la
total 8
drwxrwxr-x   2 shek shek 4096 Oct  1 01:53 .
drwxr-xr-x 103 shek shek 4096 Oct  1 01:30 ..
-rw-rw-r--   1 shek shek    0 Oct  1 01:30 a_b.txt
-rw-rw-r--   1 shek shek    0 Oct  1 01:30 a_c.txt
-rw-rw-r--   1 shek shek    0 Oct  1 01:53 b.txt
</code></pre>

<p>一般來說命名多個檔案的linux command 會類似這樣:</p>

<pre><code class="bash">for FILENAME in *; do mv $FILENAME Unix_$FILENAME; done
</code></pre>

<p>但我自已就想到用ls + awk + sed 解決這個問題，awk 和sed 非常實用，小弟真的要花點時間再深入看看awk 和 sed 有什麼其他功能...首先是要Filter我們想要的File名</p>

<pre><code class="bash">shek@shek-pc:~/folder$ ls -la | grep a | awk '{print $9}'

a_b.txt
a_c.txt

</code></pre>

<p>之後便行for loop了，為了安全起見還是不直接執行，列印了想行的command再執行</p>

<pre><code class="bash">shek@shek-pc:~/folder$ for i in $(ls -la | grep a | awk '{print $9}'); do echo mv $i $(echo $i|sed 's/a_/abc_/g') \&amp;\&amp;; done
mv a_b.txt abc_b.txt &amp;&amp;
mv a_c.txt abc_c.txt &amp;&amp;
</code></pre>

<p>之後執行以下command 便完成了!</p>

<pre><code class="bash">mv a_b.txt abc_b.txt &amp;&amp;
mv a_c.txt abc_c.txt
</code></pre>

<pre><code class="bash">shek@shek-pc:~/folder$ ls -la
total 8
drwxrwxr-x   2 shek shek 4096 Oct  1 02:02 .
drwxr-xr-x 103 shek shek 4096 Oct  1 01:30 ..
-rw-rw-r--   1 shek shek    0 Oct  1 01:30 abc_b.txt
-rw-rw-r--   1 shek shek    0 Oct  1 01:30 abc_c.txt
-rw-rw-r--   1 shek shek    0 Oct  1 01:53 b.txt
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[執行Laravel PHPUnit 時出現&quot;Maximum function nesting level of &#039;100&#039; reached, aborting!&quot;]]></title>
            <link href="/b/執行Laravel PHPUnit 時出現&quot;Maximum function nesting level of &#039;100&#039; reached, aborting!&quot;"/>
            <updated>2016-07-10T00:00:00+08:00</updated>
            <id>/b/執行Laravel PHPUnit 時出現&quot;Maximum function nesting level of &#039;100&#039; reached, aborting!&quot;</id>
            <content type="html"><![CDATA[<p>執行Laravel Project的PHPUnit 若出現</p>

<pre><code>Maximum function nesting level of '100' reached, aborting!
</code></pre>

<p>而在其他電腦運行時又沒有問題，解決方法是相當容易。先在terminal執行</p>

<pre><code class="bash">php --ini
</code></pre>

<p>確認php.ini 路徑，之後在php.ini加入</p>

<pre><code>xdebug.max_nesting_level=300
</code></pre>

<p>即可。</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[docker build image 時出現 no space left on device]]></title>
            <link href="/b/docker build image 時出現 no space left on device"/>
            <updated>2016-07-09T00:00:00+08:00</updated>
            <id>/b/docker build image 時出現 no space left on device</id>
            <content type="html"><![CDATA[<p>若發現明明電腦有好多空間，但是運行docker build時仍出現 no space left on device。則可以先運行docker info，若確認出現
Storage Driver: devicemapper                              ，則表示你的image 過了Base Device Size                  。
解決方法是找出docker.service，找出</p>

<pre><code class="bash">ExecStart=/usr/bin/docker daemon -H fd://                                                                         
</code></pre>

<p>變為</p>

<pre><code class="bash">ExecStart=/usr/bin/docker daemon --storage-opt dm.basesize=20G -H fd://                                                                         
</code></pre>

<p>之後請先參考自行備份<a href="https://linuxconfig.org/docker-container-backup-and-recovery">https://linuxconfig.org/docker-container-backup-and-recovery</a>原有的container</p>

<p>再執行</p>

<pre><code class="bash">systemctl            daemon-reload
service docker stop
service docker start
</code></pre>

<p>之後新加的image 就會增加了base size!</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[安裝Ubuntu Server至舊Notebook注意事項]]></title>
            <link href="/b/安裝Ubuntu Server至舊Notebook注意事項"/>
            <updated>2016-06-28T00:00:00+08:00</updated>
            <id>/b/安裝Ubuntu Server至舊Notebook注意事項</id>
            <content type="html"><![CDATA[<p>若家中有Notebook 不再使用，用來安裝Ubuntu Server 是一個好主意。Ubuntu Server 的下載連結如下:</p>

<p><a href="http://www.ubuntu.com/download/server">http://www.ubuntu.com/download/server</a></p>

<p>下載完iso 後便可以參考以下連結去建立USB安裝碟</p>

<p>Windows: <a href="http://www.ubuntu.com/download/desktop/create-a-usb-stick-on-windows">http://www.ubuntu.com/download/desktop/create-a-usb-stick-on-windows</a></p>

<p>Ubuntu: <a href="http://www.ubuntu.com/download/desktop/create-a-usb-stick-on-ubuntu">http://www.ubuntu.com/download/desktop/create-a-usb-stick-on-ubuntu</a></p>

<p>安裝後，為了避免開機後合上Notebook後會進入睡眠狀態，可以修改<code>/etc/systemd/logind.conf</code>
加入<code>HandleLidSwitch=ignore</code> 。
最後執行<code>sudo service restart systemd-logind</code></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[使用sftp時出現&quot;connection reset by peer connection closed&quot;]]></title>
            <link href="/b/使用sftp時出現&quot;connection reset by peer connection closed&quot;"/>
            <updated>2016-06-24T00:00:00+08:00</updated>
            <id>/b/使用sftp時出現&quot;connection reset by peer connection closed&quot;</id>
            <content type="html"><![CDATA[<p>若新加的sftp帳戶發現，出現connection reset by peer connection closed的錯誤訊息，應該先用cat 查看/etc/rsyslog.conf了解找出出現
auth,authpriv.*　的行數，便清楚需要查看那個log file以獲取進一步的資訊。若系統是Centos，多數是查看/var/log/secure，ubuntu 則查看
/var/log/auth.log。</p>

<p>以下頁面清楚說明如何fix SFTP的問題，我遇到的情況是</p>

<pre><code>sshd[12399]: fatal: bad ownership or modes for chroot directory component "/path/of/chroot/directory/"
</code></pre>

<p>解決方法是確保chroot的路徑的所有資料夾都是由root 擁有及所有path都是安全的。若有任何一個資料夾的權限是777，應該把資料夾改為775或755。</p>

<p>參考 : <a href="https://wiki.archlinux.org/index.php/SFTP_chroot">https://wiki.archlinux.org/index.php/SFTP_chroot</a></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[使用Apache設定Alias時出現403 Foridden]]></title>
            <link href="/b/使用Apache設定Alias時出現403 Foridden"/>
            <updated>2016-04-16T00:00:00+08:00</updated>
            <id>/b/使用Apache設定Alias時出現403 Foridden</id>
            <content type="html"><![CDATA[<p>這個錯誤其實是好常見的 ，如果在apache 看見 access denied because search permissions are missing on a component of the path ，
即表示<strong>根目錄至Alias 的目標資料夾</strong>中任意一個資料夾沒有execute permission!例如:</p>

<p>如果你alias的目標資夾是 <code>/usr/local/apache2/htdocs/foo</code> ，請確保以下資料夾有execute permission</p>

<p>/
/usr/
/usr/local/
/usr/local/apache2/
/usr/local/apache2/htdocs/
/usr/local/apache2/htdocs/foo/</p>

<p>owner 無須設定是apache user
因此，解決方法如下</p>

<pre><code>cd /usr/local/apache2/htdocs/foo

ls -la
chmod +x .
cd ..
# 重覆直至去到 /
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Failed to listen on localhost:8000 (reason: Address already in use)]]></title>
            <link href="/b/Failed to listen on localhost:8000 (reason: Address already in use)"/>
            <updated>2015-11-15T00:00:00+08:00</updated>
            <id>/b/Failed to listen on localhost:8000 (reason: Address already in use)</id>
            <content type="html"><![CDATA[<p>若使用 <code>php -S localhost:8000</code>來進行development時，沒有使用control +C 結束程序，便會發生該問題，因此可以建立以下bashscript結束名為"php"的proceses</p>

<pre><code class="bash">#!/bin/bash
pid=$(ps -fe | grep '[p]hp' | awk '{print $2}')
if [[ -n $pid ]]; then
    kill $pid
else
    echo "Does not exist"
fi
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Socket.io 1.3.5 cdn 同源問題]]></title>
            <link href="/b/Socket.io 1.3"/>
            <updated>2015-04-15T00:00:00+08:00</updated>
            <id>/b/Socket.io 1.3</id>
            <content type="html"><![CDATA[<p>假設己經有一個HTTPS加密網站，為了令網站更快速。因此Socket.io使用了以下的javascript cdn :</p>

<pre><code class="html">&lt;script src="https://cdn.socket.io/socket.io-1.3.4.js"&gt;&lt;/script&gt;
</code></pre>

<p>但是socket.io server 會在 polling的請求回覆400 Bad request</p>

<p>解決方法是從Socket.io依賴的原始碼找出return Access-Control-Allow-Origin Header的地方,根據socket.io v1.3.5 的源始碼,return Access-Control-Allow-Origin Header的地方位於node_modules/socket.io/node_modules/engine.io/lib/transports/polling-xhr.js</p>

<pre><code class="javascript">/**
 * Returns headers for a response.
 *
 * @param {http.ServerRequest} request
 * @param {Object} extra headers
 * @api private
 */

XHR.prototype.headers = function(req, headers){
  headers = headers || {};

  if (req.headers.origin) {
    headers['Access-Control-Allow-Credentials'] = 'true';
    headers['Access-Control-Allow-Origin'] = req.headers.origin;
  } else {
    headers['Access-Control-Allow-Origin'] = '*';
  }

  this.emit('headers', headers);
  return headers;
};
</code></pre>

<p>將該function 改成</p>

<pre><code class="javascript">/**
 * Returns headers for a response.
 *
 * @param {http.ServerRequest} request
 * @param {Object} extra headers
 * @api private
 */

XHR.prototype.headers = function(req, headers){
  headers = headers || {};

  if (req.headers.origin) {
    headers['Access-Control-Allow-Credentials'] = 'true';
    if(req.headers.origin == "https://www.example-domain.com/"){
        headers['Access-Control-Allow-Origin'] = "https://cdn.socket.io/";
    }else{
        headers['Access-Control-Allow-Origin'] = req.headers.origin;
    }
  } else {
    headers['Access-Control-Allow-Origin'] = '*';
  }

  this.emit('headers', headers);
  return headers;
};
</code></pre>

<p>或者直接新增　<code>headers['Access-Control-Allow-Origin'] = "https://cdn.socket.io/";</code>　雖然修改方法很醜。但至少可以令網站使用Socket.io CDN</p>
]]></content>
        </entry>
    </feed>